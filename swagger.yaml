openapi: 3.0.1
info:
  title: PCs
  description: 'Proyecto venta de PCs'
  termsOfService: http://pc.com/terms/
  contact:
    email: pcs@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about BigPcSale
  url: http://bigpcsale.com
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/angular5/proyecto/1.0.0
- description: PCs API Auto Mocking
  url: https://www.pcbigsale.com/angular5/proyecto/1.0.0
tags:
- name: PC
  description: Everything about your PCs
  externalDocs:
    description: Find out more
    url: http://www.pcbigsale.com
- name: store
  description: Access to Pcstore orders

- name: admin
  description: Operations about users
- name: company
- name: products
paths:

#####################################################
  /home:
    get:
      tags: 
      - user
      summary: Show home page
      description: | 
        show home page
      operationId: getHomePage
      parameters: 
      - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: succesful show home page
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            
        404:
          description: error page not found
        500:
          description: error database connection
  /admin:
    post:
      tags:
        - admin
      summary: New user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    
                  
      responses:
        '200':
          description: Created
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/company'
              examples:
                empresa1:
                  value:
                    id: 1
                    name: empresa1 loro
                empresa2:
                  value:
                    id: 2
                    name: empresa2 pato
    get:
      tags: 
        - admin
      summary: User list
      parameters:
        - $ref: '#/components/parameters/limitParam'
  
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                usuario 1:
                  value:
                    id: 1
                    username: string
                    firstName: string
                    lastName: string
                    email: string
                    password: string
                    phone: string
                    userStatus: 0
                usuario 2:
                  value:
                    id: 2
                    username: string
                    firstName: string
                    lastName: string
                    email: string
                    password: string
                    phone: string
                    userStatus: 0    
                  
  /admin/{userId}:
    get:
      tags:
        - admin
      summary: Return user by ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                empresa1:
                  value:
                    id: 1
                    username: string
                    firstName: string
                    lastName: string
                    email: string
                    password: string
                    phone: string
                    userStatus: 0
                usuario 2:
                  value:
                    id: 2
                    username: string
                    firstName: string
                    lastName: string
                    email: string
                    password: string
                    phone: string
                    userStatus: 0    
    delete:
      tags:
        - admin
      summary: delete user by ID  
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
          
    put:
      tags:
        - admin
      summary: Update user
      description: Only admins can perfom this action
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true        
        
  /admin/login:
    get:
      tags:
      - admin
      summary: Logs user into the system
      operationId: loginAdmin
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /admin/logout:
    get:
      tags:
      - admin
      summary: Logs out current logged in user session
      operationId: logoutAdmin
      responses:
        default:
          description: successful operation
          content: {}      
#####################################################
  /company:
    post:
      tags:
        - company
      summary: new company.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company'
            examples:
              empresa1:
                  value:
                    id: 1
                    name: empresa1 loro
                    direction: Uyustus
                    phone: 25347521
                    email: empresa1@gmail.com
              empresa2:
                  value:
                    id: 2
                    name: empresa2 pato
                    direction: Buenos Aires
                    phone: 2456574
                    email: empresa2@gmail.com
                  
      responses:
        '200':
          description: Created
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/company'
              examples:
                empresa1:
                  value:
                    id: 1
                    name: empresa1 loro
                    direction: Uyustus
                    phone: 25347521
                    email: empresa1@gmail.com
                empresa2:
                  value:
                    id: 2
                    name: empresa2 pato
                    direction: Buenos Aires
                    phone: 2456574
                    email: empresa2@gmail.com
    get:
      tags: 
        - company
      summary: lista de empresas.
      parameters:
        - $ref: '#/components/parameters/limitParam'
  
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
              examples:
                empresa1:
                  value:
                    id: 1
                    name: empresa1 loro
                    direction: Uyustus
                    phone: 25347521
                    email: empresa1@gmail.com
                empresa2:
                  value:
                    id: 2
                    name: empresa2 pato
                    direction: Buenos Aires
                    phone: 2456574
                    email: empresa2@gmail.com
              
  /company/{userId}:
    get:
      tags:
        - company
      summary: Return by ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
              examples:
                empresa1:
                  value:
                    id: 1
                    name: empresa1 loro
                    direction: Uyustus
                    phone: 25347521
                    email: empresa1@gmail.com
                empresa2:
                  value:
                    id: 2
                    name: empresa2 pato
                    direction: Buenos Aires
                    phone: 2456574
                    email: empresa2@gmail.com
                
    delete:
      tags:
        - company
      summary: Delete by ID  
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
              examples:
                company1:
                  value:
                    id: 1
                    name: empresa1 loro
                    direction: Uyustus
                    phone: 25347521
                    email: empresa1@gmail.com
                company2:
                  value:
                    id: 2
                    name: empresa2 pato
                    direction: Buenos Aires
                    phone: 2456574
                    email: empresa2@gmail.com
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
          
    put:
      tags:
        - company
      summary: Update an company
      description: Only admins can perfom this action
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company'
        required: true        
#####################################################
#####################################################
  /product:
    put:
      tags:
      - product
      summary: Update an existing product
      operationId: updateProduct
      requestBody:
        description: Computer items needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
    post:
      tags:
      - product
      summary: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Product object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
  /product/findByStatus:
    get:
      tags:
      - product
      summary: Finds Products by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findProductsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        400:
          description: Invalid status value
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
  
  /product/{productId}:
    get:
      tags:
      - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
      - name: productId
        in: path
        description: ID of product to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: product not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - product
      summary: Updates a product in the store with form data
      operationId: updateProductWithForm
      parameters:
      - name: productId
        in: path
        description: ID of product that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the product
                status:
                  type: string
                  description: Updated status of the product
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - productstore_auth:
        - write:product
        - read:product
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: productId
        in: path
        description: product id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: product not found
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
  /product/{productId}/uploadImage:
    post:
      tags:
      - product
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: productId
        in: path
        description: ID of product to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - productstore_auth:
        - write:products
        - read:products
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns product inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a product
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the product
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of product that needs to be fetched
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
  /store/cart:
    get:
      tags:
      - store
      summary: Show actual cart
      operationId: showCart
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        404:
          description: Not found
          content: {}
      x-codegen-request-body-name: body
  /store/checkout:
    get:
      tags:
      - store
      summary: Show cart checkout
      operationId: showCheckout
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Checkout'
            application/json:
              schema:
                $ref: '#/components/schemas/Checkout'
        404:
          description: Not found
          content: {}
      x-codegen-request-body-name: body
#####################################################

#####################################################
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user/{id}/report:
    get:
      tags:
        - user
      summary: Show all purchases
      operationId: showReport
      description: Show all reports of a specific user
      parameters:
        - in: path
          name: id
          description: pass user id for show its report
          schema:
            type: string
          required: true
      responses:
        '200':
          description: purchase history report
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '400':
          description: bad input parameter
  /user/{id}/chats:
    get:
      tags:
        - user
      summary: Show all chats 
      operationId: showChatHistory
      description: Show chat history of a user
      parameters:
        - in: path
          name: id
          description: pass user id for show its chat history
          schema:
            type: string
          required: true
      responses:
        '200':
          description: show history chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        '400':
          description: bad input parameter
components:
  schemas:
    company:
      type: object
      required:        # Both properties are required
        - id
        - name
        - direction
        - phone
        - email
      properties:
        id:
          type: integer
        name:
          type: string
        direction:
          type: string
        phone:
          type: string
        email:
          type: string  
    Producto:
      type: object
      required:        # Both properties are required
        - id
        - producto
      properties:
        id:
          type: integer
        producto:
          type: string
  ####################
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        adress:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Product:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        company:
          $ref: '#/components/schemas/company'  
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: product status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: product
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      #added
    Cart:
      required: 
      - cartId
      - orders
      type: object
      properties:
        cartId:
          type: integer
          format: int64
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        total:
          type: number
        discount:
          type: number
      xml:
        name: Cart
    Checkout:
      required: 
      - Id
      - cart
      type: object
      properties:
        Id:
          type: integer
          format: int64
        cart:
          $ref: '#/components/schemas/Cart'
        date:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        paymentMethod:
          type: string
      xml:
        name: Checkout
    #added
    Report:
      type: object
      required:
        - id
        - receipts
      properties:
        id:
          type: string
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/Checkout'
            
    Chat:
      properties:
        id:
         type: string
         example: WDW21
        customerId:
          $ref: '#/components/schemas/User'
        companyId:
          $ref: '#/components/schemas/company'
        date:
          type: string
      type: object
####################
  # Common parameters
####################
  parameters:
    offsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
      description: La cantidad de elementos que se deben omitir antes de devolver los resultados.

    limitParam:
      in: query
      name: limit
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 1
      description: La cantidad de elementos para devolver
      
  securitySchemes:
    productstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://productstore.swagger.io/oauth/dialog
          scopes:
            write:product: modify product in your account
            read:product: read your products
            
          
    api_key:
      type: apiKey
      name: api_key
      in: header
